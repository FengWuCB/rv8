# format of a line in this file:
# <instruction name> "<instruction pseudo code>"

# RV32I    "RV32I Base Integer Instruction Set"

lui        "rd = imm"
auipc      "rd = pc + imm"
jal        "rd = pc + length(inst); pc_offset = imm"
jalr       "rd = pc + length(inst); pc_offset =  rs1 + imm - pc"
beq        "if (sx(rs1) == sx(rs2)) pc_offset = imm"
bne        "if (sx(rs1) != sx(rs2)) pc_offset = imm"
blt        "if (sx(rs1) < sx(rs2)) pc_offset = imm"
bge        "if (sx(rs1) >= sx(rs2)) pc_offset = imm"
bltu       "if (ux(rs1) < ux(rs2)) pc_offset = imm"
bgeu       "if (ux(rs1) >= ux(rs2)) pc_offset = imm"
lb         "rd = sx(*(s8*)ptr(rs1 + imm))"
lh         "rd = sx(*(s16*)ptr(rs1 + imm))"
lw         "rd = sx(*(s32*)ptr(rs1 + imm))"
lbu        "rd = ux(*(u8*)ptr(rs1 + imm))"
lhu        "rd = ux(*(u16*)ptr(rs1 + imm))"
lwu        "rd = ux(*(u32*)ptr(rs1 + imm))"
sb         "*((u8*)ptr(rs1 + imm)) = rs2"
sh         "*((u16*)ptr(rs1 + imm)) = rs2"
sw         "*((u32*)ptr(rs1 + imm)) = rs2"
addi       "rd = sx(rs1) + sx(imm)"
slti       "rd = sx(rs1) < sx(imm)"
sltiu      "rd = ux(rs1) < ux(imm)"
xori       "rd = ux(rs1) ^ ux(imm)"
ori        "rd = ux(rs1) | ux(imm)"
andi       "rd = ux(rs1) & ux(imm)"
slli       "rd = ux(rs1) << imm"
srli       "rd = ux(rs1) >> imm"
srai       "rd = sx(rs1) >> imm"
add        "rd = sx(rs1) + sx(rs2)"
sub        "rd = sx(rs1) - sx(rs2)"
sll        "rd = ux(rs1) << (rs2 & 0b1111111)" # 7-bit mask is for RV128I
slt        "rd = sx(rs1) < sx(rs2)"
sltu       "rd = ux(rs1) < ux(rs2)"
xor        "rd = ux(rs1) ^ ux(rs2)"
srl        "rd = ux(rs1) >> (rs2 & 0b1111111)" # 7-bit mask is for RV128I
sra        "rd = sx(rs1) >> (rs2 & 0b1111111)" # 7-bit mask is for RV128I
or         "rd = ux(rs1) | ux(rs2)"
and        "rd = ux(rs1) & ux(rs2)"
fence      ""
fence.i    ""

# RV64I    "RV64I Base Integer Instruction Set (in addition to RV32I)"

ld         "rd = sx(*(s64*)ptr(rs1 + imm))"
sd         "*(u64*)ptr(rs1 + imm) = rs2"
addiw      "rd = s32(s32(rs1) + sx(imm))"     # gcc-works vs clang-bugs with "rd = s32(rs1) + s32(imm)"
slliw      "rd = s32(u32(rs1) << imm)"
srliw      "rd = s32(u32(rs1) >> imm)"
sraiw      "rd = s32(rs1) >> imm"
addw       "rd = s32(rs1) + s32(rs2)"
subw       "rd = s32(rs1) - s32(rs2)"
sllw       "rd = s32(u32(rs1) << (rs2 & 0b11111))"
srlw       "rd = s32(u32(rs1) >> (rs2 & 0b11111))"
sraw       "rd = s32(rs1) >> (rs2 & 0b11111)"

# RV32M    "RV32M Standard Extension for Integer Multiply and Divide"

mul        "rd = riscv::mul(sx(rs1), sx(rs2))"
mulh       "rd = riscv::mulh(sx(rs1), sx(rs2))"
mulhsu     "rd = riscv::mulhsu(sx(rs1), ux(rs2))"
mulhu      "rd = riscv::mulhu(ux(rs1), ux(rs2))"
div        "rd = sx(rs1) == sx(INT_MIN) && sx(rs2) == -1 ? sx(INT_MIN) : sx(rs2) == 0 ? -1 : sx(rs1) / sx(rs2)"
divu       "rd = sx(rs2) == 0 ? -1 : sx(ux(rs1) / ux(rs2))"
rem        "rd = sx(rs1) == sx(INT_MIN) && sx(rs2) == -1 ? 0 : sx(rs2) == 0 ? sx(rs1) : sx(rs1) % sx(rs2)"
remu       "rd = sx(rs2) == 0 ? sx(rs1) : sx(ux(rs1) % ux(rs2))"

# RV64M    "RV64M Standard Extension for Integer Multiply and Divide (in addition to RV32M)"

mulw       "rd = s32(u32(rs1) * u32(rs2))"
divw       "rd = s32(rs1) == s32(INT_MIN) && s32(rs2) == -1 ? s32(INT_MIN) : s32(rs2) == 0 ? -1 : s32(rs1) / s32(rs2)"
divuw      "rd = s32(rs2) == 0 ? -1 : s32(u32(rs1) / u32(rs2))"
remw       "rd = s32(rs1) == s32(INT_MIN) && s32(rs2) == -1 ? 0 : s32(rs2) == 0 ? s32(rs1) : s32(rs1) % s32(rs2)"
remuw      "rd = s32(rs2) == 0 ? s32(rs1) : s32(u32(rs1) % u32(rs2))"

# RV32A    "RV32A Standard Extension for Atomic Instructions"

lr.w       "lr = rs1; rd = sx(*((s32*)rs1))"
sc.w       "ux res; if (lr == rs1) { *((s32*)rs1) = s32(rs2); res = 0; } else { res = 1; }; rd = res"
amoswap.w  "s32 t(*(s32*)rs1); *((s32*)rs1) = s32(rs2); rd = t"
amoadd.w   "s32 t(*(s32*)rs1); *((s32*)rs1) = s32(rs2) + t; rd = t"
amoxor.w   "s32 t(*(s32*)rs1); *((s32*)rs1) = s32(rs2) ^ t; rd = t"
amoor.w    "s32 t(*(s32*)rs1); *((s32*)rs1) = s32(rs2) | t; rd = t"
amoand.w   "s32 t(*(s32*)rs1); *((s32*)rs1) = s32(rs2) & t; rd = t"
amomin.w   "s32 t(*(s32*)rs1); *((s32*)rs1) = s32(rs2) < t ? s32(rs2) : t; rd = t"
amomax.w   "s32 t(*(s32*)rs1); *((s32*)rs1) = s32(rs2) > t ? s32(rs2) : t; rd = t"
amominu.w  "s32 t(*(s32*)rs1); *((s32*)rs1) = u32(rs2) < u32(t) ? s32(rs2) : t; rd = t"
amomaxu.w  "s32 t(*(s32*)rs1); *((s32*)rs1) = u32(rs2) > u32(t) ? s32(rs2) : t; rd = t"

# RV64A    "RV64A Standard Extension for Atomic Instructions (in addition to RV32A)"

lr.d       "lr = rs1; rd = sx(*((s64*)rs1))"
sc.d       "ux res; if (lr == rs1) { *((s64*)rs1) = s64(rs2); res = 0; } else { res = 1; }; rd = res"
amoswap.d  "s64 t(*(s64*)rs1); *((s64*)rs1) = s64(rs2); rd = t"
amoadd.d   "s64 t(*(s64*)rs1); *((s64*)rs1) = s64(rs2) + t; rd = t"
amoxor.d   "s64 t(*(s64*)rs1); *((s64*)rs1) = s64(rs2) ^ t; rd = t"
amoor.d    "s64 t(*(s64*)rs1); *((s64*)rs1) = s64(rs2) | t; rd = t"
amoand.d   "s64 t(*(s64*)rs1); *((s64*)rs1) = s64(rs2) & t; rd = t"
amomin.d   "s64 t(*(s64*)rs1); *((s64*)rs1) = s64(rs2) < t ? s64(rs2) : t; rd = t"
amomax.d   "s64 t(*(s64*)rs1); *((s64*)rs1) = s64(rs2) > t ? s64(rs2) : t; rd = t"
amominu.d  "s64 t(*(s64*)rs1); *((s64*)rs1) = u64(rs2) < u64(t) ? s64(rs2) : t; rd = t"
amomaxu.d  "s64 t(*(s64*)rs1); *((s64*)rs1) = u64(rs2) > u64(t) ? s64(rs2) : t; rd = t"

# RV32S    "RV32S Standard Extension for Supervisor-level Instructions"

ecall
ebreak
uret
sret
hret
mret
dret
sfence.vm
wfi
rdcycle
rdtime
rdinstret
rdcycleh
rdtimeh
rdinstreth
csrrw
csrrs
csrrc
csrrwi
csrrsi
csrrci

# RV32F    "RV32F Standard Extension for Single-Precision Floating-Point"

flw        "f32(frd) = *(f32*)ptr(rs1 + imm)"
fsw        "*(f32*)ptr(rs1 + imm) = f32(frs2)"
fmadd.s    "fenv_setrm(rm); f32(frd) = f32(frs1) * f32(frs2) + f32(frs3)"
fmsub.s    "fenv_setrm(rm); f32(frd) = f32(frs1) * f32(frs2) - f32(frs3)"
fnmadd.s   "fenv_setrm(rm); f32(frd) = -(f32(frs1) * f32(frs2) + f32(frs3))"
fnmsub.s   "fenv_setrm(rm); f32(frd) = -(f32(frs1) * f32(frs2) - f32(frs3))"
fadd.s     "fenv_setrm(rm); f32(frd) = f32(frs1) + f32(frs2)"
fsub.s     "fenv_setrm(rm); f32(frd) = f32(frs1) - f32(frs2)"
fmul.s     "fenv_setrm(rm); f32(frd) = f32(frs1) * f32(frs2)"
fdiv.s     "fenv_setrm(rm); f32(frd) = f32(frs1) / f32(frs2)"
fsgnj.s    "u32(frd) = (u32(frs1) & u32(~(1U<<31))) | (u32(frs2) & u32(1U<<31))"
fsgnjn.s   "u32(frd) = (u32(frs1) & u32(~(1U<<31))) | (~u32(frs2) & u32(1U<<31))"
fsgnjx.s   "u32(frd) = u32(frs1) ^ (u32(frs2) & u32(1U<<31))"
fmin.s     "f32(frd) = (f32(frs1) < f32(frs2)) | ((u32(frs2) & u32(f32(NAN))) == u32(f32(NAN))) ? f32(frs1) : f32(frs2)"
fmax.s     "f32(frd) = (f32(frs1) > f32(frs2)) | ((u32(frs2) & u32(f32(NAN))) == u32(f32(NAN))) ? f32(frs1) : f32(frs2)"
fsqrt.s    "fenv_setrm(rm); f32(frd) = f32_sqrt(f32(frs1))"
fle.s      "rd = f32(frs1) <= f32(frs2)"
flt.s      "rd = f32(frs1) < f32(frs2)"
feq.s      "rd = f32(frs1) == f32(frs2)"
fcvt.w.s   "fenv_setrm(rm); rd = (~u32(frs1) >> 31) & (s32(f32(frs1)) < 0) ? s32(INT_MAX) : s32(f32(frs1))"   # s32(f32(frs1))
fcvt.wu.s  "fenv_setrm(rm); rd = u32(f32(frs1) > 0 ? f32(frs1) : 0)"                                          # f32(frs1)
fcvt.s.w   "fenv_setrm(rm); f32(frd) = f32(s32(rs1))"
fcvt.s.wu  "fenv_setrm(rm); f32(frd) = f32(u32(rs1))"
fmv.x.s    "rd = (u32(frs1) & u32(f32(NAN))) == u32(f32(NAN)) ? s32(u32(f32(NAN))) : s32(frs1)"
fclass.s   "rd = f32_classify(f32(frs1))"
fmv.s.x    "u32(frd) = u32(rs1)"

# RV64F    "RV64F Standard Extension for Single-Precision Floating-Point (in addition to RV32F)"

fcvt.l.s   "fenv_setrm(rm); rd = (~u32(frs1) >> 31) & (s64(f32(frs1)) < 0) ? s64(INT_MAX) : s64(f32(frs1))"   # s64(f32(frs1))
fcvt.lu.s  "fenv_setrm(rm); rd = u64(f32(frs1) > 0 ? f32(frs1) : 0)"                                          # f32(frs1)
fcvt.s.l   "fenv_setrm(rm); f32(frd) = f32(s64(rs1))"
fcvt.s.lu  "fenv_setrm(rm); f32(frd) = f32(u64(rs1))"

# RV32D    "RV32D Standard Extension for Double-Precision Floating-Point"

fld        "f64(frd) = *(f64*)ptr(rs1 + imm)"
fsd        "*(f64*)ptr(rs1 + imm) = f64(frs2)"
fmadd.d    "fenv_setrm(rm); f64(frd) = f64(frs1) * f64(frs2) + f64(frs3)"
fmsub.d    "fenv_setrm(rm); f64(frd) = f64(frs1) * f64(frs2) - f64(frs3)"
fnmadd.d   "fenv_setrm(rm); f64(frd) = -(f64(frs1) * f64(frs2) + f64(frs3))"
fnmsub.d   "fenv_setrm(rm); f64(frd) = -(f64(frs1) * f64(frs2) - f64(frs3))"
fadd.d     "fenv_setrm(rm); f64(frd) = f64(frs1) + f64(frs2)"
fsub.d     "fenv_setrm(rm); f64(frd) = f64(frs1) - f64(frs2)"
fmul.d     "fenv_setrm(rm); f64(frd) = f64(frs1) * f64(frs2)"
fdiv.d     "fenv_setrm(rm); f64(frd) = f64(frs1) / f64(frs2)"
fsgnj.d    "u64(frd) = (u64(frs1) & u64(~(1ULL<<63))) | (u64(frs2) & u64(1ULL<<63))"
fsgnjn.d   "u64(frd) = (u64(frs1) & u64(~(1ULL<<63))) | (~u64(frs2) & u64(1ULL<<63))"
fsgnjx.d   "u64(frd) = u64(frs1) ^ (u64(frs2) & u64(1ULL<<63))"
fmin.d     "f64(frd) = (f64(frs1) < f64(frs2)) | ((u64(frs2) & u64(f64(NAN))) == u64(f64(NAN))) ? f64(frs1) : f64(frs2)"
fmax.d     "f64(frd) = (f64(frs1) > f64(frs2)) | ((u64(frs2) & u64(f64(NAN))) == u64(f64(NAN))) ? f64(frs1) : f64(frs2)"
fcvt.s.d   "fenv_setrm(rm); f32(frd) = f32(f64(frs1))"
fcvt.d.s   "fenv_setrm(rm); f64(frd) = f64(f32(frs1))"
fsqrt.d    "fenv_setrm(rm); f64(frd) = f64_sqrt(f64(frs1))"
fle.d      "rd = f64(frs1) <= f64(frs2)"
flt.d      "rd = f64(frs1) < f64(frs2)"
feq.d      "rd = f64(frs1) == f64(frs2)"
fcvt.w.d   "fenv_setrm(rm); rd = (~u64(frs1) >> 63) & (s32(f64(frs1)) < 0) ? s32(INT_MAX) : s32(f64(frs1))"   # s32(f64(frs1))
fcvt.wu.d  "fenv_setrm(rm); rd = u32(f64(frs1) > 0 ? f64(frs1) : 0)"                                          # f64(frs1)
fcvt.d.w   "fenv_setrm(rm); f64(frd) = f64(s32(rs1))"
fcvt.d.wu  "fenv_setrm(rm); f64(frd) = f64(u32(rs1))"
fclass.d   "rd = f64_classify(f64(frs1))"

# RV64D    "RV64D Standard Extension for Double-Precision Floating-Point (in addition to RV32F)"

fcvt.l.d   "fenv_setrm(rm); rd = (~u64(frs1) >> 63) & (s64(f64(frs1)) < 0) ? s64(INT_MAX) : s64(f64(frs1))"   # s64(f64(frs1))
fcvt.lu.d  "fenv_setrm(rm); rd = u64(f64(frs1) > 0 ? f64(frs1) : 0)"                                          # f64(frs1)
fmv.x.d    "rd = (u64(frs1) & u64(f64(NAN))) == u64(f64(NAN)) ? s64(u64(f64(NAN))) : s64(frs1)"               # s64(frs1)
fcvt.d.l   "fenv_setrm(rm); f64(frd) = f64(s64(rs1))"
fcvt.d.lu  "fenv_setrm(rm); f64(frd) = f64(u64(rs1))"
fmv.d.x    "u64(frd) = u64(rs1)"

# RV32FD   "RV32F and RV32D Common Floating-Point Instructions"

frcsr
frrm
frflags
fscsr
fsrm
fsflags
fsrmi
fsflagsi
