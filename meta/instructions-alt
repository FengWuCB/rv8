# RV32I
lui        "Load Upper Immediate"                           "rd ← imm"
auipc      "Add Upper Immediate to PC"                      "rd ← disp"
jal        "Jump and Link"                                  "rd ← pc ↪ disp"
jalr       "Jump and Link Register"                         "rd ← pc ↪ rs1 + imm"
beq        "Branch Equal"                                   "rs1 = rs2 ↪ disp"
bne        "Branch Not Equal"                               "rs1 ≠ rs2 ↪ disp"
blt        "Branch Less Than "                              "rs1 < rs2 ↪ disp"
bge        "Branch Greater than Equal"                      "rs1 ≧ rs2 ↪ disp"
bltu       "Branch Less Than Unsigned"                      "rs1 < rs2 ↪ disp"
bgeu       "Branch Greater than Equal Unsigned"             "rs1 ≧ rs2 ↪ disp"
lb         "Load Byte"                                      "rd ← s8[rs1 + imm]"
lh         "Load Half"                                      "rd ← s16[rs1 + imm]"
lw         "Load Word"                                      "rd ← s32[rs1 + imm]"
lbu        "Load Byte Unsigned"                             "rd ← u8[rs1 + imm]"
lhu        "Load Half Unsigned"                             "rd ← u16[rs1 + imm]"
lwu        "Load Word Unsigned"                             "rd ← u32[rs1 + imm]"
sb         "Store Byte"                                     "rs2 → u8[rs1 + imm]"
sh         "Store Half"                                     "rs2 → u16[rs1 + imm]"
sw         "Store Word"                                     "rs2 → u32[rs1 + imm]"
addi       "Add Immediate"                                  "rd ← rs1 + s(imm)"
slti       "Set Less Than Immediate"                        "rd ← s(rs1) < s(imm)"
sltiu      "Set Less Than Immediate Unsigned"               "rd ← u(rs1) < u(imm)"
xori       "Xor Immediate"                                  "rd ← u(rs1) ⊻ s(imm)"
ori        "Or Immediate"                                   "rd ← u(rs1) ∨ s(imm)"
andi       "And Immediate"                                  "rd ← u(rs1) ∧ s(imm)"
slli       "Shift Left Logical Immediate"                   "rd ← u(rs1) « s(imm)"
srli       "Shift Right Logical Immediate"                  "rd ← u(rs1) » s(imm)"
srai       "Shift Right Arithmetic Immediate"               "rd ← s(rs1) » s(imm)"
add        "Add"                                            "rd ← s(rs1) + s(rs2)"
sub        "Subtract"                                       "rd ← s(rs1) - s(rs2)"
sll        "Shift Left Logical"                             "rd ← u(rs1) « rs2"
slt        "Set Less Than"                                  "rd ← s(rs1) < s(rs2)"
sltu       "Set Less Than Unsigned"                         "rd ← u(rs1) < u(rs2)"
xor        "Xor"                                            "rd ← u(rs1) ⊻ u(rs2)"
srl        "Shift Right Logical"                            "rd ← u(rs1) » rs2"
sra        "Shift Right Arithmetic"                         "rd ← s(rs1) » rs2"
or         "Or"                                             "rd ← s(rs1) ∨ s(rs2)"
and        "And"                                            "rd ← s(rs1) ∧ s(rs2)"
fence      "Fence"                                          "fence"
fence.i    "Fence Instruction"                              "fence_i"

# RV64I
ld         "Load Double"                                    "rd ← u64[rs1 + imm]"
sd         "Store Double"                                   "rs2 → u64[rs1 + imm]"
addiw      "Add Immediate Word"                             "rd ← s32(rs1) + imm"
slliw      "Shift Left Logical Immediate Word"              "rd ← u32(rs1) « imm"
srliw      "Shift Right Logical Immediate Word"             "rd ← u32(rs1) » imm"
sraiw      "Shift Right Arithmetic Immediate Word"          "rd ← s32(rs1) » imm"
addw       "Add Word"                                       "rd ← s32(rs1) + s32(rs2)"
subw       "Subtract Word"                                  "rd ← s32(rs1) - s32(rs2)"
sllw       "Shift Left Logical Word"                        "rd ← u32(rs1) « rs2"
srlw       "Shift Right Logical Word"                       "rd ← u32(rs1) » rs2"
sraw       "Shift Right Arithmetic Word"                    "rd ← s32(rs1) » rs2"

# RV32M
mul        "Multiply"                                       "rd ← u(rs1) × u(rs2)"
mulh       "Multiply High Signed Signed"                    "rd ← (s(rs1) × s(rs2)) » xlen"
mulhsu     "Multiply High Signed Unsigned"                  "rd ← (s(rs1) × u(rs2)) » xlen"
mulhu      "Multiply High Unsigned Unsigned"                "rd ← (u(rs1) × u(rs2)) » xlen"
div        "Divide Signed"                                  "rd ← s(rs1) ÷ s(rs2)"
divu       "Divide Unsigned"                                "rd ← u(rs1) ÷ u(rs2)"
rem        "Remainder Signed"                               "rd ← s(rs1) mod s(rs2)"
remu       "Remainder Unsigned"                             "rd ← u(rs1) mod u(rs2)"

# RV64M 
mulw       "Multiple Word"                                  "rd ← u32(rs1) × u32(rs2)"
divw       "Divide Signed Word"                             "rd ← s32(rs1) ÷ s32(rs2)"
divuw      "Divide Unsigned Word"                           "rd ← u32(rs1) ÷ u32(rs2)"
remw       "Remainder Signed Word"                          "rd ← s32(rs1) mod s32(rs2)"
remuw      "Remainder Unsigned Word"                        "rd ← u32(rs1) mod u32(rs2)"

# RV32A    "RV32A Standard Extension for Atomic Instructions"

lr.w       "Load Reserved Word"                             "rs1 → lr ∧ rd ← s(s32[rs1])"
sc.w       "Store Conditional Word"                         "lr = rs1 ∧ u32[rs1] ← u32[rs2]"
amoswap.w  "Atomic Swap Word"                               "rd ← s32[rs1] ∥ u32[rs1] ← s32[rs2]"
amoadd.w   "Atomic Add Word"                                "rd ← s32[rs1] ∥ u32[rs1] ← s32[rs2] + s32[rs1]"
amoxor.w   "Atomic Xor Word"                                "rd ← s32[rs1] ∥ u32[rs1] ← s32[rs2] ⊻ s32[rs1]"
amoor.w    "Atomic Or Word"                                 "rd ← s32[rs1] ∥ u32[rs1] ← s32[rs2] ∨ s32[rs1]"
amoand.w   "Atomic And Word"                                "rd ← s32[rs1] ∥ u32[rs1] ← s32[rs2] ∧ s32[rs1]"
amomin.w   "Atomic Minimum Word"                            "rd ← s32[rs1] ∥ u32[rs1] ← min(s32[rs2], s32[rs1])"
amomax.w   "Atomic Maximum Word"                            "rd ← s32[rs1] ∥ u32[rs1] ← max(s32[rs2], s32[rs1])"
amominu.w  "Atomic Minimum Unsigned Word"                   "rd ← s32[rs1] ∥ u32[rs1] ← min(u32[rs2], u32[rs1])"
amomaxu.w  "Atomic Maximum Unsigned Word"                   "rd ← s32[rs1] ∥ u32[rs1] ← max(u32[rs2], u32[rs1])"

# RV64A    "RV64A Standard Extension for Atomic Instructions (in addition to RV32A)"

lr.d       "Load Reserved Double Word"                      "rs1 → lr ∧ rd ← s(s64[rs1])"
sc.d       "Store Conditional Double Word"                  "lr = rs1 ∧ u64[rs1] ← u64[rs2]"
amoswap.d  "Atomic Swap Double Word"                        "rd ← s64[rs1] ∥ u64[rs1] ← s64[rs2]"
amoadd.d   "Atomic Add Double Word"                         "rd ← s64[rs1] ∥ u64[rs1] ← s64[rs2] + s64[rs1]"
amoxor.d   "Atomic Xor Double Word"                         "rd ← s64[rs1] ∥ u64[rs1] ← s64[rs2] ⊻ s64[rs1]"
amoor.d    "Atomic Or Double Word"                          "rd ← s64[rs1] ∥ u64[rs1] ← s64[rs2] ∨ s64[rs1]"
amoand.d   "Atomic And Double Word"                         "rd ← s64[rs1] ∥ u64[rs1] ← s64[rs2] ∧ s64[rs1]"
amomin.d   "Atomic Minimum Double Word"                     "rd ← s64[rs1] ∥ u64[rs1] ← min(s64[rs2], s64[rs1])"
amomax.d   "Atomic Maximum Double Word"                     "rd ← s64[rs1] ∥ u64[rs1] ← max(s64[rs2], s64[rs1])"
amominu.d  "Atomic Minimum Unsigned Double Word"            "rd ← s64[rs1] ∥ u64[rs1] ← min(u64[rs2], u64[rs1])"
amomaxu.d  "Atomic Maximum Unsigned Double Word"            "rd ← s64[rs1] ∥ u64[rs1] ← max(u64[rs2], u64[rs1])"

# RV32S    "RV32S Standard Extension for Supervisor-level Instructions"

ecall      "System Call"
ebreak     "System Break to Debugger"
uret       "User Return"
sret       "System Return"
hret       "Hypervisor Return"
mret       "Machine-Mode Return"
dret       "Debug-Mode Return"
sfence.vm  "Supervisor Memory Management Fence"
wfi        "Wait For Interrupt"
csrrw      "CSR Atomic Read Write"
csrrs      "CSR Atomic Set Bit"
csrrc      "CSR Atomic Clear Bit"
csrrwi     "CSR Atomic Read Write Immediate"
csrrsi     "CSR Atomic Set Bit Immediate"
csrrci     "CSR Atomic Clear Bit Immediate"

# RV32F    "RV32F Standard Extension for Single-Precision Floating-Point"

flw        "FP Load (SP)"                                   "frd → f32[rs1 + imm]"
fsw        "FP Store (SP)"                                  "f32[rs1 + imm] ← f32(frs2)"
fmadd.s    "FP Fused Multiply Add (SP)"                     "frd ← f32(frs1) × f32(frs2) + f32(frs3)"
fmsub.s    "FP Fused Multiply Subtract (SP)"                "frd ← f32(frs1) × f32(frs2) - f32(frs3)"
fnmsub.s   "FP Negate fused Multiply Add (SP)"              "frd ← -(f32(frs1) × f32(frs2) + f32(frs3))"
fnmadd.s   "FP Negate fused Multiply Subtract (SP)"         "frd ← -(f32(frs1) × f32(frs2) - f32(frs3))"
fadd.s     "FP Add (SP)"                                    "frd ← f32(frs2) + f32(frs1)"
fsub.s     "FP Subtract (SP)"                               "frd ← f32(frs2) - f32(frs1)"
fmul.s     "FP Multiply (SP)"                               "frd ← f32(frs2) × f32(frs1)"
fdiv.s     "FP Divide (SP)"                                 "frd ← f32(frs2) ÷ f32(frs1)"
fsgnj.s    "FP Sign-injection (SP)"                         "frd ← copysign(f32(frs1), f32(frs2))"
fsgnjn.s   "FP Sign-injection Negate (SP)"                  "frd ← -copysign(f32(frs1), f32(frs2))"
fsgnjx.s   "FP Sign-injection Xor (SP)"                     "frd ← xorsign(f32(frs1), f32(frs2))"
fmin.s     "FP Minimum (SP)"                                "frd ← min(f32(frs1), f32(frs2))"
fmax.s     "FP Maximum (SP)"                                "frd ← max(f32(frs1), f32(frs2))"
fsqrt.s    "FP Square Root (SP)"                            "frd ← sqrt(f32(frs1))"
fle.s      "FP Less Than Equal (SP)"                        "rd ← f32(frs1) ≤ f32(frs2)"
flt.s      "FP Less Than (SP)"                              "rd ← f32(frs1) < f32(frs2)"
feq.s      "FP Equal (SP)"                                  "rd ← f32(frs1) = f32(frs2)"
fcvt.w.s   "FP Convert Float to Word (SP)"                  "rd ← s32(f32(frs1))"
fcvt.wu.s  "FP Convert Float to Word Unsigned (SP)"         "rd ← u32(f32(frs1))"
fcvt.s.w   "FP Convert Word to Float (SP)"                  "frd ← f32(s32(rs1))"
fcvt.s.wu  "FP Convert Word Unsigned to Float (SP)"         "frd ← f32(u32(rs1))"
fmv.x.s    "FP Move to Integer Register (SP)"               "rd ← u32(frs1)"
fclass.s   "FP Classify (SP)"                               "rd ← f32_classify(f32(frs1))"
fmv.s.x    "FP Move from Integer Register (SP)"             "frd ← s32(rs1)"

# RV64F    "RV64F Standard Extension for Single-Precision Floating-Point (in addition to RV32F)"

fcvt.l.s   "FP Convert Float to Double Word (SP)"           "rd ← s64(frs1)"
fcvt.lu.s  "FP Convert Float to Double Word Unsigned (SP)"  "rd ← u64(frs1)"
fcvt.s.l   "FP Convert Double Word to Float (SP)"           "frd ← f32(s64(rs1))"
fcvt.s.lu  "FP Convert Double Word Unsigned to Float (SP)"  "frd ← f32(u64(rs1))"

# RV32D    "RV32D Standard Extension for Double-Precision Floating-Point"

fld        "FP Load (DP)"                                   "frd ← f64[rs1 + imm]"
fsd        "FP Store (DP)"                                  "f64[rs1 + imm] ← f64(frs2)"
fmadd.d    "FP Fused Multiply Add (DP)"                     "frd ← f64(frs1) × f64(frs2) + f64(frs3)"
fmsub.d    "FP Fused Multiply Subtract (DP)"                "frd ← f64(frs1) × f64(frs2) - f64(frs3)"
fnmsub.d   "FP Negate fused Multiply Add (DP)"              "frd ← -(f64(frs1) × f64(frs2) + f64(frs3))"
fnmadd.d   "FP Negate fused Multiply Subtract (DP)"         "frd ← -(f64(frs1) × f64(frs2) - f64(frs3))"
fadd.d     "FP Add (DP)"                                    "frd ← f64(frs2) + f64(frs1)"
fsub.d     "FP Subtract (DP)"                               "frd ← f64(frs2) - f64(frs1)"
fmul.d     "FP Multiply (DP)"                               "frd ← f64(frs2) × f64(frs1)"
fdiv.d     "FP Divide (DP)"                                 "frd ← f64(frs2) ÷ f64(frs1)"
fsgnj.d    "FP to Sign-injection (DP)"                      "frd ← copysign(f64(frs1), f64(frs2))"
fsgnjn.d   "FP to Sign-injection Negate (DP)"               "frd ← -copysign(f64(frs1), f64(frs2))"
fsgnjx.d   "FP to Sign-injection Xor (DP)"                  "frd ← xorsign(f64(frs1), f64(frs2))"
fmin.d     "FP Minimum (DP)"                                "frd ← min(f64(frs1), f64(frs2))"
fmax.d     "FP Maximum (DP)"                                "frd ← max(f64(frs1), f64(frs2))"
fcvt.s.d   "FP Convert DP to SP"                            "frd ← f64_to_f32(f64(frs1))"
fcvt.d.s   "FP Convert SP to DP"                            "frd ← f32_to_f64(f32(frs1))"
fsqrt.d    "Floating Square Root (DP)"                      "frd ← sqrt(f64(frs1))"
fle.d      "FP Less Than Equal (DP)"                        "rd ← f64(frs1) ≤ f64(frs2)"
flt.d      "FP Less Than (DP)"                              "rd ← f64(frs1) < f64(frs2)"
feq.d      "FP Equal (DP)"                                  "rd ← f64(frs1) = f64(frs2)"
fcvt.w.d   "FP Convert Float to Word (DP)"                  "rd ← s32(f64(frs1))"
fcvt.wu.d  "FP Convert Float to Word Unsigned (DP)"         "rd ← u32(f64(frs1))"
fcvt.d.w   "FP Convert Word to Float (DP)"                  "rd ← s32(f64(frs1))"
fcvt.d.wu  "FP Convert Word Unsigned to Float (DP)"         "rd ← u32(f64(frs1))"
fclass.d   "FP Classify (DP)"                               "rd ← f64_classify(f64(frs1))"

# RV64D    "RV64D Standard Extension for Double-Precision Floating-Point (in addition to RV32F)"

fcvt.l.d   "FP Convert Float to Double Word (DP)"           "rd ← f64_to_i64(f64(frs1), rm, true)"
fcvt.lu.d  "FP Convert Float to Double Word Unsigned (DP)"  "rd ← f64_to_ui64(f64(frs1), rm, true)"
fmv.x.d    "FP Move to Integer Register (DP)"               "rd ← u64(frs1)"
fcvt.d.l   "FP Convert Double Word to Float (DP)"           "frd ← i64_to_f64(rs1)"
fcvt.d.lu  "FP Convert Double Word Unsigned Float (DP)"     "frd ← ui64_to_f64(rs1)"
fmv.d.x    "FP Move from Integer Register (DP)"             "frd ← s64(rs1)"

# RV32FD   "RV32F and RV32D Common Floating-Point Instructions"

frcsr      "Read FP control and status register"
frrm       "Read FP Rounding Mode"
frflags    "Read FP Accrued Exception Flags"
fscsr      "Set FP control and status register"
fsrm       "Set FP Rounding Mode"
fsflags    "Set FP Accrued Exception Flags"
fsrmi      "Set FP Rounding Mode Immediate"
fsflagsi   "Set FP Accrued Exception Flags Immediate"
